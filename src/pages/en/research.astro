---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";

// 1. Fetch all research projects
const researchProjects = await getCollection("research", ({ data }) => data.lang === 'en');

// 2. Format items
const allItems = researchProjects.map((project) => {
  const rawStart = project.data.startDate ?? (project.data as any).date ?? (project.data as any).start_date ?? '';
  const startDate = rawStart ? new Date(String(rawStart)) : new Date();
  return {
    title: project.data.title,
    date: startDate,
    description: project.data.description,
    url: `/en/research/${project.slug}/`,
    tags: project.data.tags || [],
    category: project.data.category,
  };
});

// 3. Sort items by date
const sortedItems = allItems.sort((a, b) => b.date.getTime() - a.date.getTime());

// 4. Define categories for filtering
const categories = ["Research", "Products", "Partnerships & Outreach"];
---

<Layout title="Research | SIMG">
  <Header slot="header" />
  <main>
    <div class="title-container">
        <h1>SIMG Research Catalog</h1>
        <p>Explore our latest research projects and publications.</p>
    </div>

    <div class="search-controls-container">
        <div class="filter-group">
            <span class="filter-label">Filter by category:</span>
            <div class="category-buttons" id="filter-buttons">
                <button class="filter-btn active" data-category="all">All</button>
                {categories.map((cat) => (
                    <button class="filter-btn" data-category={cat}>{cat}</button>
                ))}
            </div>
        </div>
        <div class="search-input-group">
            <svg class="search-icon" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M11 7C11 9.20914 9.20914 11 7 11C4.79086 11 3 9.20914 3 7C3 4.79086 4.79086 3 7 3C9.20914 3 11 4.79086 11 7Z" stroke="black" stroke-width="2"/>
                <path d="M10 10L14 14" stroke="black" stroke-width="2" stroke-linecap="square"/>
            </svg>
            <input type="text" id="search-input" placeholder="Search posts..." class="search-input" />
        </div>
    </div>

    <!-- Research Items Grid -->
    <div class="research-grid">
      {
        sortedItems.map((item) => (
          <a href={item.url} class="research-card" data-category={item.category} data-title={item.title.toLowerCase()}>
            <div class="card-content">
                <div class="card-header">
                    {item.category && (
                        <span class="card-category">{item.category}</span>
                    )}
                </div>
                <h3 class="card-title">{item.title}</h3>
                <p class="card-description">{item.description}</p>
                <div class="card-tags">
                    {item.tags.map(tag => <span class="tag">{tag}</span>)}
                </div>
                <div class="card-meta">
                    <span class="card-date">{item.date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</span>
                </div>
            </div>
          </a>
        ))
      }
    </div>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const filterButtons = document.querySelectorAll('.filter-btn');
    const researchCards = document.querySelectorAll('.research-card');
    let activeCategory = 'all';
    let searchTerm = '';

    // Set initial checkmark on the active button
    const initialActiveBtn = document.querySelector('.filter-btn.active');
    if (initialActiveBtn) {
        initialActiveBtn.innerHTML += '<span class="checkmark"> ✓</span>';
    }

    function filterItems() {
      researchCards.forEach(card => {
        const cardCategory = card.getAttribute('data-category');
        const cardTitle = card.getAttribute('data-title') || '';

        const categoryMatch = activeCategory === 'all' || cardCategory === activeCategory;
        const searchMatch = cardTitle.includes(searchTerm);

        // Narrow type to HTMLElement so ".style" is available
        if (card instanceof HTMLElement) {
          if (categoryMatch && searchMatch) {
            card.style.display = 'block';
          } else {
            card.style.display = 'none';
          }
        }
      });
    }

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove active class and checkmark from all buttons
        filterButtons.forEach(btn => {
            btn.classList.remove('active');
            const checkmark = btn.querySelector('.checkmark');
            if (checkmark) {
                checkmark.remove();
            }
        });

        // Add active class and checkmark to the clicked button
        button.classList.add('active');
        button.innerHTML += '<span class="checkmark"> ✓</span>';

        activeCategory = button.getAttribute('data-category') ?? 'all';

        filterItems();
      });
    });

    // Only attach the input listener if the element exists and is an input
    const searchInputEl = searchInput instanceof HTMLInputElement ? searchInput : null;
    if (searchInputEl) {
      searchInputEl.addEventListener('input', () => {
        searchTerm = searchInputEl.value.toLowerCase();
        filterItems();
      });
    }
  });
</script>

<style>
  .card-meta {
    display: flex;
    justify-content: flex-end;
    width: 100%;
    margin-top: 1rem;
  }

  .card-header {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    gap: 0.5rem;
  }

  .card-date {
    font-size: 0.85rem;
    color: #6c757d;
    font-style: italic;
  }

  .card-category {
    display: inline-block;
    background-color: #3498db; /* Darker blue background */
    color: white; /* White text for better contrast */
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 600;
    margin-bottom: 1rem;
    margin-right: 0.5rem;
  }
  main {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1.5rem;
  }

  .title-container {
    text-align: center;
    margin-bottom: 3rem;
  }

  h1 {
    font-size: 2.8rem;
    color: var(--dark-text);
  }

  .title-container p {
      font-size: 1.2rem;
      color: var(--medium-text);
      margin-top: -1rem;
  }

  .search-controls-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    margin-bottom: 3rem;
  }

  .filter-group {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .filter-label {
    color: #333;
    white-space: nowrap;
  }

  .category-buttons {
    display: flex;
    border: 1px solid black;
  }

  .filter-btn {
    padding: 10px 15px;
    border: none; /* Remove individual borders */
    border-left: 1px solid #566573; /* Separator color */
    background-color: #2c3e50; /* Dark blue for non-active buttons */
    cursor: pointer;
    font-size: 16px;
    color: white; /* White text for contrast */
    white-space: nowrap;
    transition: all 0.2s ease-in-out;
  }

  .category-buttons .filter-btn:first-child {
    border-left: none; /* No separator for the first button */
  }

  .filter-btn.active {
    background-color: #3498db; /* A lighter, contrasting blue for active */
    color: white; /* Keep text white */
  }

  .filter-btn .checkmark {
    color: #FF6347; /* Orange-red color for the checkmark */
    margin-left: 5px;
  }

  .search-input-group {
    position: relative;
  }

  .search-icon {
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    image-rendering: pixelated; 
  }

  .search-input {
    background-color: transparent;
    border: none;
    border-bottom: 1px solid #333;
    padding: 8px 8px 8px 25px; /* Left padding to not overlap icon */
    font-size: 1rem;
    width: 200px; /* Adjust as needed */
  }

  .research-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 1.5rem;
  }

  .research-card {
    background-color: white;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
    text-decoration: none;
    color: inherit;
    display: block;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid #e0e0e0;
    overflow: hidden;
  }

  .research-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(52, 152, 219, 0.15);
    border-color: var(--primary-blue-light);
  }

  .card-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
  }

  .card-title {
    font-size: 1.25rem;
    color: var(--dark-text);
    margin: 0 0 0.75rem 0;
  }

  .card-description {
    font-size: 0.95rem;
    color: var(--medium-text);
    line-height: 1.6;
    margin-bottom: 1rem;
  }

  .card-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: auto;
  }
</style>